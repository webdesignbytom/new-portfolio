generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// USERS
enum Role {
  USER
  ADMIN
  DEVELOPER
}

model User {
  id             String            @id @default(uuid())
  email          String            @unique
  password       String
  firstName      String            @default("")
  lastName       String            @default("")
  country        String            @default("")
  role           Role              @default(USER)
  profileImage   String?           @default("https://www.pngfind.com/pngs/m/676-6764065_default-profile-picture-transparent-hd-png-download.png")
  createdEvents  Event[]           @relation("createdEvents")
  receivedEvents Event[]           @relation("receivedEvents")
  isVerified     Boolean           @default(false)
  verifications  UserVerification?
  passwordReset  PasswordReset?
  notifications  Notification[]
  projects       Project[]
  designs        Design[]
  review         Review?
  complaints     Complaint?
  agreedToTerms  Boolean           @default(false)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime?         @updatedAt
}

model UserVerification {
  id           String    @id @default(uuid())
  uniqueString String    @unique
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}

model PasswordReset {
  id           String    @id @default(uuid())
  uniqueString String    @unique
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt    DateTime
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}

enum NotificationType {
  PURCHASE
  COMPLETION
  MESSAGE
  OFFER
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  content   String
  userId    String           @unique
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  viewed    Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime?        @updatedAt
}

// EVENTS
enum EventType {
  ERROR
  USER
  ADMIN
  VISITOR
  DEVELOPER
}

model Event {
  id           Int       @id @default(autoincrement())
  type         EventType
  topic        String?
  code         Int?
  content      String?
  createdBy    User?     @relation("createdEvents", fields: [createdById], references: [id], onDelete: Cascade)
  createdById  String?
  receivedBy   User?     @relation("receivedEvents", fields: [receivedById], references: [id], onDelete: Cascade)
  receivedById String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}

// Components
enum ComponentType {
  BASIC
  SHOP
  FULLSTACK
  PREMIUM
  NAVIGATION
  API
}

model Component {
  id        Int           @id @default(autoincrement())
  type      ComponentType
  name      String        @default("")
  desc      String        @default("")
  mainImage String        @default("")
  price     Int
  createdAt DateTime      @default(now())
  updatedAt DateTime?     @updatedAt
}

enum PageType {
  SHOP
  BLOG
  ADMIN
  DEVELOPER
  BASIC
  PREMIUM
  CANVAS
}

model Page {
  id        Int       @id @default(autoincrement())
  type      PageType
  name      String    @default("")
  desc      String    @default("")
  price     Int
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

enum ProjectType {
  BASIC
  BASIC_SHOP
  FULLSTACK
  OTHER
  CUSTOM
  SINGLE_PAGE
}

model Project {
  id          Int         @id @default(autoincrement())
  type        ProjectType
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  pagesTotal  Int?
  domainName  String?
  price       Int
  userStories UserStory[]
  startDate   DateTime    @default(now())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime?   @updatedAt
}

model Design {
  id           Int            @id @default(autoincrement())
  name         String
  colorPalette ColorPalette[]
  userId       String
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime?      @updatedAt
}

model UserStory {
  id        Int       @id @default(autoincrement())
  content   String
  projectId Int
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model ColorPalette {
  id           Int       @id @default(autoincrement())
  bgMain       String?   @default("")
  bgAlt        String?   @default("")
  paletteOne   String?   @default("")
  paletteTwo   String?   @default("")
  paletteThree String?   @default("")
  hover        String?   @default("")
  selected     String?   @default("")
  designId     Int
  design       Design    @relation(fields: [designId], references: [id], onDelete: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
}

// User reviews
model Review {
  id        Int       @id @default(autoincrement())
  value     Int
  email     String    @unique
  userId    String?   @unique
  user      User?     @relation(fields: [userId], references: [id])
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Complaint {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  userId    String?   @unique
  user      User?     @relation(fields: [userId], references: [id])
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
